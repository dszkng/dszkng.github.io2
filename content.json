{"meta":{"title":"Dszkng's blog","subtitle":"blog","description":"blog,dszkng","author":"dszkng","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-06-24T10:07:15.000Z","updated":"2020-07-03T09:24:15.963Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":".my-links{display:flex;justify-content:center;align-content:center;margin-top:30px;width:100%}.my-links a{display:flex;color:#000;padding:2px 10px;border-bottom:none!important}.my-links a:after{display:none}.my-links a:hover{backround:#ddd}.my-links a span{font-size:28px}.img-center{margin:0 auto}.dark-obsidian.article.main.content{padding:0 6rem}@media screen and(max-width:1200px){.dark-obsidian.article.main.content{padding:0 0.5rem}} Who am I 欢迎来到我的博客,我是 奇谈(Dszkng) 追求极致,追求完美,喜欢一个高效,优雅,高凝聚力的团队, 立志于打造最优秀的产品,成为一名既优雅而有深度的技术人才。 喜欢接受挑战，爱好音乐、电影，喜欢生活和工作平衡，有节奏感的人生。 Welcome to my blog,I am Dszkng Full-stack software engineer and framework architect, specialized in PHP,Javascript,VueJs,AngularJs,Webpack,Laravel,Lumen. Open Sources Dev Gears 硬件：MackBook Pro 系统：MacOS 编辑器： PhpStorm, IntelliJ IDEA, Goland, VS Code PHP代码风格矫正器： PHP-CS-Fixer 命令行工具： iTerm2(Mac) 浏览器： Chrome 虚拟机： VirtualBox MySQL数据库查询工具： Sequel Pro(Mac) Redis管理工具： Medis(Mac) MongoDB管理工具： Robo 3T 设计工具： Sketch 5(Mac) Markdown编写工具： Typora"},{"title":"categories2","date":"2019-12-01T08:33:21.000Z","updated":"2020-06-24T10:08:46.870Z","comments":true,"path":"categories2/index.html","permalink":"http://yoursite.com/categories2/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-12-01T08:33:32.000Z","updated":"2019-12-01T09:54:20.360Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ajax 跨域请求，每次会发送两个请求？","slug":"ajax-跨域请求，每次会发送两个请求？","date":"2019-12-19T09:49:00.000Z","updated":"2020-07-03T09:30:29.423Z","comments":true,"path":"2019/12/19/ajax-跨域请求，每次会发送两个请求？/","link":"","permalink":"http://yoursite.com/2019/12/19/ajax-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%AF%8F%E6%AC%A1%E4%BC%9A%E5%8F%91%E9%80%81%E4%B8%A4%E4%B8%AA%E8%AF%B7%E6%B1%82%EF%BC%9F/","excerpt":"","text":"","categories":[],"tags":[],"author":"dszkng"},{"title":"PHP 断点调试（xdebug）","slug":"PHP-断点调试（xdebug）","date":"2019-12-03T01:39:00.000Z","updated":"2020-06-24T09:50:52.564Z","comments":true,"path":"2019/12/03/PHP-断点调试（xdebug）/","link":"","permalink":"http://yoursite.com/2019/12/03/PHP-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%EF%BC%88xdebug%EF%BC%89/","excerpt":"","text":"断点调试（xdebug）合适的调试器是软件开发中最有用的工具之一，它使你可以跟踪程序执行结果并监视程序堆栈中的信息。xdebug 是一个 PHP 的调试器，它可以被用来在很多 IDE 中做断点调试以及堆栈检查。它还可以像 PHPUnit 和 KCacheGrind 一样，做代码覆盖检查或者程序性能跟踪（Profile &amp; Trace）。 PHP 代码在 print_r 输出较大的数组时，后面内容可能会出现 ... 而看不到，使用 xdebug 就能解决这个问题。 在本地调试，可以想怎么调试怎么调试，如果线上程序出了 bug，需要在服务器上调试，一般是 改代码 =&gt; 上传 =&gt; 访问，打印输出信息，非常繁琐，而 xdebug 可以远程调试，提高调试的效率。 原理安装&amp;使用1.PHP 安装 xdebug 扩展（略），xdebug 配置如下： # php.ini [XDebug] ; Debug Config xdebug.remote_enable = 1 xdebug.idekey = &quot;PHPSTORM&quot; xdebug.remote_handler = &quot;dbgp&quot; ; xdebug.remote_connect_back = 1 xdebug.remote_host = &quot;host.docker.internal&quot; xdebug.remote_port = 9000 xdebug.remote_log = &quot;/var/log/php.xdebug.log&quot; 2.配置 IDE（PhpStorm），xdebug 有两种调试模式： 针对单文件（test.php） 针对项目（xx-api/） 2.1针对单文件调试 配置： 针对项目调试 配置 Server（配置目录映射） 配置 debug 的本地监听端口 启动本地监听服务。 Run =&gt; Start Listening for PHP Debug Connections 或者点击电话的图标。 在 PhpStorm 中打断点 打开调试的页面/接口地址+?XDEBUG_SESSION_START=PHPSTORM，目的就是带上在 xdebug 配置中约定的 PHPSTORM 字符串，服务端好知道请求的目的。 此时 PhpStorm 会蹦出一个调试栏，可以看到调试信息。 PhpStorm 会拦截当前执行的脚本状态，运行你设置的断点并查看内存中的值。 到这里其实已经大功告成了，但是每次调试都要手动加上参数会不会太麻烦了？是的，这个问题已经有人帮你想好啦，可以去装一个浏览器插件，chrome的插件是 xdebug helper。开启这个插件就不需要在 URL 上加参数了。它的原理是给浏览器设置一个 cookie，Name 是 XDEBUG_SESSION，Key 是 PHPSTORM。 为什么要设置目录映射？无论那种调试模式，实际上运行的都是 Docker 中的项目和文件，所以开启映射就相当于给 Docker 中的项目打断点，和 PHP 执行的文件就统一了！这样才能成功。 如果你仍在使用 var_dump()/print_r() 调错，经常会发现自己处于困境，并且仍然找不到解决办法。这时，你该使用调试器了。 总结xdebug 是一个开放源代码的 PHP 程序调试和性能分析器（即一个 debug 工具），可以用来跟踪，调试和分析 PHP 程序的运行状况。相比echo、print_r()、var_dump()、printf()函数，使用xdebug的效率和精准度更高、也更快捷。 参考文章：xdebug介绍xdebug原理xdebug配置使用xdebug对php做性能分析调优PhpStorm + Docker LNMP 中 Xdebug 配置","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://yoursite.com/tags/PHP/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"xdebug","slug":"xdebug","permalink":"http://yoursite.com/tags/xdebug/"},{"name":"断点调试","slug":"断点调试","permalink":"http://yoursite.com/tags/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"}],"author":"dszkng"},{"title":"linux 让命令或程序在终端后台运行的方法（Ubuntu/Fedora/CentOS 等一样适用）","slug":"linux-cmd-back-run","date":"2019-07-28T14:52:00.000Z","updated":"2020-07-03T09:30:17.511Z","comments":true,"path":"2019/07/28/linux-cmd-back-run/","link":"","permalink":"http://yoursite.com/2019/07/28/linux-cmd-back-run/","excerpt":"","text":"引言我们在用SecureCRT等终端工具远程登录时，很多时候需要执行一个程序，但是希望程序在用户注销或终端关闭后，能够继续在后台运行。下面介绍几种方法还有注意事项： 方法1：命令后面加 &amp;一般情况下在命令后面加&amp;，然后回车执行，就可以了： $ node server &amp;方法2：运行命令后再按 ctrl+z如果你的命令是要执行一个不退出的程序，例如： $ node server那么它就会一直阻塞控制台，不能输入其他命令了。这时候想让这个程序转到后台运行的话，按ctrl+z便能使其转到后台运行；可以释放控制台做其他操作了。 方法3：使用 bg 命令如果在你进行操作之前，程序早就已经在前台运行了的话，要找回这个程序，先输入jobs，查看要找回的程序，记住左边的编号；再输入bg 编号，搞定。 $ jobs [1]+ 已停止 sudo node server $ bg 1特别要注意的一点涉及到用户权限的命令，如果要放后台运行，必须先运行这个命令，再 ctrl+z 放到后台。 不能直接后面加 &amp;： $ sudo node server &amp;必须去先执行命令： $ sudo node server [sudo] password for xxx: 输入密码然后再按 ctrl+z 将程序放到后台运行。 原因很简单，因为在输命令后还需要确认一次密码，想直接加 &amp; 就会让程序自己后台运行的话，岂不大 bug 也？ 这也是网上很多教程文章等等的忽略的一点，忘记提醒刚接触 linux 的读者，让大家走了好多弯路，例如曾经的我，哈哈哈。 转载自：segmentfault","categories":[{"name":"运维","slug":"运维","permalink":"http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"后台运行","slug":"后台运行","permalink":"http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"}],"author":"dszkng"}],"categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"运维","slug":"运维","permalink":"http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://yoursite.com/tags/PHP/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"xdebug","slug":"xdebug","permalink":"http://yoursite.com/tags/xdebug/"},{"name":"断点调试","slug":"断点调试","permalink":"http://yoursite.com/tags/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"},{"name":"后台运行","slug":"后台运行","permalink":"http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"}]}